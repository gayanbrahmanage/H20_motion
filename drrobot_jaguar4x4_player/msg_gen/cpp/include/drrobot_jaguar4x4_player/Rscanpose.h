/* Auto-generated by genmsg_cpp for file /home/bgs/catkin_ws/H20_motion/drrobot_jaguar4x4_player/msg/Rscanpose.msg */
#ifndef DRROBOT_JAGUAR4X4_PLAYER_MESSAGE_RSCANPOSE_H
#define DRROBOT_JAGUAR4X4_PLAYER_MESSAGE_RSCANPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace drrobot_jaguar4x4_player
{
template <class ContainerAllocator>
struct Rscanpose_ {
  typedef Rscanpose_<ContainerAllocator> Type;

  Rscanpose_()
  : Rscanpose()
  {
    Rscanpose.assign(0.0);
  }

  Rscanpose_(const ContainerAllocator& _alloc)
  : Rscanpose()
  {
    Rscanpose.assign(0.0);
  }

  typedef boost::array<float, 645>  _Rscanpose_type;
  boost::array<float, 645>  Rscanpose;


  typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator>  const> ConstPtr;
}; // struct Rscanpose
typedef  ::drrobot_jaguar4x4_player::Rscanpose_<std::allocator<void> > Rscanpose;

typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::Rscanpose> RscanposePtr;
typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::Rscanpose const> RscanposeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace drrobot_jaguar4x4_player

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b2170f99f4bd314082e9742552d3d71";
  }

  static const char* value(const  ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1b2170f99f4bd314ULL;
  static const uint64_t static_value2 = 0x082e9742552d3d71ULL;
};

template<class ContainerAllocator>
struct DataType< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "drrobot_jaguar4x4_player/Rscanpose";
  }

  static const char* value(const  ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[645] Rscanpose\n\
\n\
";
  }

  static const char* value(const  ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Rscanpose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Rscanpose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::drrobot_jaguar4x4_player::Rscanpose_<ContainerAllocator> & v) 
  {
    s << indent << "Rscanpose[]" << std::endl;
    for (size_t i = 0; i < v.Rscanpose.size(); ++i)
    {
      s << indent << "  Rscanpose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Rscanpose[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // DRROBOT_JAGUAR4X4_PLAYER_MESSAGE_RSCANPOSE_H

